function flag = triangle_intersection(P1, P2)
% triangle_test : returns true if the triangles overlap and false otherwise

%%% All of your code should be between the two lines of stars.
% *******************************************************************
%判断两三角形是否重合
num_com=0;%两个三角形共点的个数
for i=1:3
    for j=1:3
        if P1(i,:)==P2(j,:)
            num_com = num_com + 1;
        end
    end
end
if num_com==3%三个点相同，两个三角形重合
    flag=true;
    return;
end

%判断边是否有相交
%思路：先求两直线的交点，再判断交点是否在线段上，注意如果交点正好位于线段的边缘，
%或者线段是水平或垂直的，则简单比较可能会出现问题
% for i = 1:3
num = 1;
    for j = 1:2
        for k = j+1:3
            A1(num) =  P1(j,2) - P1(k,2);
            B1(num) = -P1(j,1) + P1(k,1);
            C1(num) =  P1(k,1) * P1(j,2) - P1(j,1) * P1(k,2);
            
            A2(num) =  P2(j,2) - P2(k,2);
            B2(num) = -P2(j,1) + P2(k,1);
            C2(num) =  P2(k,1) * P2(j,2) - P2(j,1) * P2(k,2);
            
            num = num + 1;
        end
%     end
end   %转化为Ax+By=C的形式

for i = 1:3
    for j = 1:3
        A = [A1(i), B1(i); A2(j), B2(j)];
        B = [C1(i); C2(j)];
        X = inv(A) * B;
        x = X(1);
        y = X(2);
        
        switch i
            case 1
                x11 = P1(1,1); x12 = P1(2,1); x21 = P2(1,1); MIN_x22 = P2(2,1); 
            case 2
                x11 = P1(1,1); x12 = P1(3,1); x21 = P2(1,1); x22 = P2(3,1); 
            case 3
                x11 = P1(1,1); x12 = P1(2,1); x21 = P2(1,1); x22 = P2(2,1); 
        end
        
    end
end




flag = false;
% *******************************************************************
end